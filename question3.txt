Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

function compressor(input) {
  let output = "";
  let counter = 1;
  let workingBlob = input.split("");
  for (i = 0; i < workingBlob.length; i++) {
    if (workingBlob[i] === workingBlob[i +1]) {
      counter ++;
    } else {
      output += counter + workingBlob[i];
      counter = 1;
    }
  }
    return output.replace(1,"");
}

first ill make a output with an empty string to push the result into. Ill make a counter variable to add to the output. Ill split the input into individual strings for each character and ill make a for loop that will loop through each character. if the letter the index is at is equal the index position +1 or the next character than add to counter and if it isnt than add the current counter value to the output and the current index position and then reset the counter to one! The return statement will take of any lingering 1s that were to any letters!


add to the output current counter number + the index youre on and then reset counter to one so that your next character counter is back at 1